@using Entities2
@using Business

<div class="form-group">
    <select class="form-control" @onchange="OnChangedWarehouse">
        <option value="">Seleccione una bodega...</option>
        @foreach (var warehouse in warehouses)
        {
            <option value="@warehouse.WarehouseID">@warehouse.WarehouseName</option>
        }
    </select>
</div>

<hr />
<EditForm Model="oInOut">
    <div class="form-group">
        <InputSelect @bind-Value="oInOut.StorageID" class="form-control">
            <option value="">Seleccione una bodega...</option>
            @foreach (StorageEntity storage in storages)
            {
                <option value="@storage.StorageID">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label>Escriba la cantidad</label>
        <InputNumber class="form-control" @bind-Value="@oInOut.Quantity" />
    </div>
    <div class="form-group">

        <input class="form-check-input" type="checkbox" id="flexCheckDefault" @bind-value="@oInOut.IsInput"/>
        <label class="form-check-label" for="flexCheckDefault">
            ¿Es una entrada?
        </label>
    </div>



    <input type="button" value="@buttonValue" class="form-control" @onclick="SaveInOut" />
</EditForm>

<h4 class="text-center">@message</h4>

@code {
    InOutEntity oInOut = new InOutEntity();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<StorageEntity> storages = new List<StorageEntity>();

    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();

    string buttonValue => oInOut.IsInput
                        ? "Registrar entrada"
                        : "Registrar salida";

    string message;
    WarehouseBusiness instanciaw = new WarehouseBusiness();
    StorageBusiness instancias = new StorageBusiness();
    ProductBusiness instanciap = new ProductBusiness();


    protected override async Task OnInitializedAsync()
    {
        warehouses = instanciaw.GetList();
    }

    private void OnChangedWarehouse(ChangeEventArgs e)
    {
        string warehouseID = e.Value.ToString();

        storages = instancias.StorageProductsByWarehouse(warehouseID);
    }

    private void SaveInOut()
    {
        oStorage = storages.FirstOrDefault(s => s.StorageID == oInOut.StorageID);
        oProduct = oStorage.Product;

        if (oInOut.IsInput)
        {
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
            instancias.Update(oStorage);

            oProduct.TotalQuantity = oProduct.TotalQuantity + oInOut.Quantity;
            instanciap.Update(oProduct);

            message = $"Se ha registrado una entrada del producto {oProduct.ProductName}";
        }
        else
        {
            if (oInOut.Quantity < oStorage.PartialQuantity)
            {
                oStorage.PartialQuantity = oStorage.PartialQuantity - oInOut.Quantity;
                instancias.Update(oStorage);

                oProduct.TotalQuantity = oProduct.TotalQuantity - oInOut.Quantity;
                instanciap.Update(oProduct);

                message = $"Se ha registrado una salida del producto {oProduct.ProductName}";
            }
            else
            {
                message = "Cantidad insuficiente para realizar operación.";
            }
        }
    }
}