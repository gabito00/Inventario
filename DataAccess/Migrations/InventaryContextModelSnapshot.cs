// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(InventaryContext))]
    partial class InventaryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Entities2.CategoryEntity", b =>
                {
                    b.Property<string>("CategoryID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = "ASH",
                            CategoryName = "Aseo Hogar"
                        },
                        new
                        {
                            CategoryID = "ASP",
                            CategoryName = "Aseo Personal"
                        },
                        new
                        {
                            CategoryID = "HGR",
                            CategoryName = "Hogar"
                        },
                        new
                        {
                            CategoryID = "PRF",
                            CategoryName = "Perfumería"
                        },
                        new
                        {
                            CategoryID = "SLD",
                            CategoryName = "Salud"
                        },
                        new
                        {
                            CategoryID = "VDJ",
                            CategoryName = "Video Juegos"
                        });
                });

            modelBuilder.Entity("Entities2.InOutEntity", b =>
                {
                    b.Property<string>("InOutID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InOutDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInput")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("StorageID")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("InOutID");

                    b.HasIndex("StorageID");

                    b.ToTable("InOut");
                });

            modelBuilder.Entity("Entities2.ProductEntity", b =>
                {
                    b.Property<string>("ProductID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CategoryID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entities2.StorageEntity", b =>
                {
                    b.Property<string>("StorageID")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PartialQuantity")
                        .HasColumnType("int");

                    b.Property<string>("ProductID")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarehouseID")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StorageID");

                    b.HasIndex("ProductID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Entities2.WarehouseEntity", b =>
                {
                    b.Property<string>("WarehouseID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WarehouseAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WarehouseID");

                    b.ToTable("Wherehouses");

                    b.HasData(
                        new
                        {
                            WarehouseID = "004554b7-1128-43a7-9942-3dab5304d49e",
                            WarehouseAddress = "Av. Rivadavia 10000",
                            WarehouseName = "Bodega Central"
                        },
                        new
                        {
                            WarehouseID = "63895671-7dbe-4bf8-92b8-4d65eb97ed05",
                            WarehouseAddress = "Av. Rivadavia",
                            WarehouseName = "Bodega Gran BsAs"
                        },
                        new
                        {
                            WarehouseID = "3ecfacd5-f8b5-472a-91a9-7ea476cf48a1",
                            WarehouseAddress = "Dirección Desconocida",
                            WarehouseName = "Bodega Norte"
                        },
                        new
                        {
                            WarehouseID = "57be573d-0494-4b36-ba7f-63b79364af30",
                            WarehouseAddress = "Dirección Desconocida",
                            WarehouseName = "Bodega Centro"
                        },
                        new
                        {
                            WarehouseID = "06a4f4f8-f206-4397-b61d-49f15aa6d241",
                            WarehouseAddress = "Dirección Desconocida",
                            WarehouseName = "Bodega Sur"
                        });
                });

            modelBuilder.Entity("Entities2.InOutEntity", b =>
                {
                    b.HasOne("Entities2.StorageEntity", "Storage")
                        .WithMany("InputOutputs")
                        .HasForeignKey("StorageID");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Entities2.ProductEntity", b =>
                {
                    b.HasOne("Entities2.CategoryEntity", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities2.StorageEntity", b =>
                {
                    b.HasOne("Entities2.ProductEntity", "Product")
                        .WithMany("Storages")
                        .HasForeignKey("ProductID");

                    b.HasOne("Entities2.WarehouseEntity", "Warehouse")
                        .WithMany("Storages")
                        .HasForeignKey("WarehouseID");

                    b.Navigation("Product");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("Entities2.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities2.ProductEntity", b =>
                {
                    b.Navigation("Storages");
                });

            modelBuilder.Entity("Entities2.StorageEntity", b =>
                {
                    b.Navigation("InputOutputs");
                });

            modelBuilder.Entity("Entities2.WarehouseEntity", b =>
                {
                    b.Navigation("Storages");
                });
#pragma warning restore 612, 618
        }
    }
}
